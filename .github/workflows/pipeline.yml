name: Pipeline (CI → Security → Deploy → DAST)

on:
  push:
    branches: [ "**" ]          # CI & SAST on every branch
  pull_request:                  # CI & SAST on PRs
  workflow_dispatch:             # allow manual run

permissions:
  contents: read
  security-events: write
  packages: write

concurrency:
  group: pipeline-${{ github.ref }}
  cancel-in-progress: false

env:
  DEPLOY_PATH: ${{ vars.DEPLOY_PATH || '/srv/dvwa' }}
  POST_DEPLOY_CMD: ${{ vars.POST_DEPLOY_CMD || '' }}

jobs:
  # ---------------- CI ----------------
  ci:
    name: Unit / Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # TODO: replace with your real build/tests
      - run: echo "run your tests here"

  # -------------- SAST (Semgrep) --------------
  semgrep:
    runs-on: ubuntu-latest
    needs: [ci]
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep
        run: |
          python -m pip install semgrep
          # Generate multiple report formats
          semgrep ci --sarif --output=semgrep.sarif || echo "Semgrep scan completed with findings"
          semgrep ci --json --output=semgrep.json || echo "Semgrep JSON report generated"
          semgrep ci --text --output=semgrep.txt || echo "Semgrep text report generated"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always() && hashFiles('semgrep.sarif') != ''
      - name: Upload Semgrep Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-reports
          path: |
            semgrep.sarif
            semgrep.json
            semgrep.txt
          retention-days: 30

  # -------------- IaC (tfsec) --------------
  tfsec:
    runs-on: ubuntu-latest
    needs: [ci]
    steps:
      - uses: actions/checkout@v4
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          format: json
          soft_fail: true
      - name: Generate additional tfsec reports
        run: |
          # Install tfsec if not available
          if ! command -v tfsec &> /dev/null; then
            curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          fi
          # Generate multiple report formats
          tfsec . --format json --out tfsec.json --soft-fail || echo "tfsec scan completed"
          tfsec . --format sarif --out tfsec.sarif --soft-fail || echo "tfsec SARIF generated"
          tfsec . --format text --out tfsec.txt --soft-fail || echo "tfsec text report generated"
        continue-on-error: true
      - name: Upload tfsec Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tfsec-reports
          path: |
            tfsec.json
            tfsec.sarif
            tfsec.txt
          retention-days: 30

  # -------------- CodeQL --------------
  codeql:
    runs-on: ubuntu-latest
    needs: [ci]
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]   # PHP not supported by CodeQL
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3
        with:
          upload: true
          output: codeql-results
      - name: Upload CodeQL Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codeql-results-${{ matrix.language }}
          path: codeql-results
          retention-days: 30

  # -------------- Container Build & Scan --------------
  container:
    name: Build image & Trivy scan
    runs-on: ubuntu-latest
    needs: [semgrep, tfsec, codeql]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -t app:ci .
      - name: Trivy scan (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: app:ci
          format: sarif
          output: trivy.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Trivy scan (JSON)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: app:ci
          format: json
          output: trivy.json
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
      - name: Trivy scan (Table)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: app:ci
          format: table
          output: trivy.txt
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-reports
          path: |
            trivy.sarif
            trivy.json
            trivy.txt
          retention-days: 30

  # -------------- Deploy --------------
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [container]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    env:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_PORT: ${{ secrets.VPS_PORT }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Install rsync, ssh client & sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync openssh-client sshpass

      - name: Configure SSH
        run: |
          # Create SSH directory with proper permissions
          install -m 700 -d ~/.ssh
          
          # Add host to known_hosts (disable host key checking for password auth)
          ssh-keyscan -p "${VPS_PORT:-22}" "$VPS_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Create SSH config to disable strict host key checking
          cat << EOF > ~/.ssh/config
          Host *
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
              LogLevel QUIET
          EOF
          chmod 600 ~/.ssh/config
          
          # Test SSH connection with password
          echo "Testing SSH connection with password authentication..."
          sshpass -p "$VPS_PASSWORD" ssh -o ConnectTimeout=10 -p "${VPS_PORT:-22}" "$VPS_USER@$VPS_HOST" "echo 'SSH connection successful'" || echo "SSH test failed - will retry in next step"

      - name: Ensure remote dir & rsync present
        run: |
          sshpass -p "$VPS_PASSWORD" ssh -o ConnectTimeout=30 -p "${VPS_PORT:-22}" "$VPS_USER@$VPS_HOST" "\
            mkdir -p '$DEPLOY_PATH' && \
            ( command -v rsync >/dev/null 2>&1 || \
              (sudo apt-get update && sudo apt-get install -y rsync) || \
              (which yum >/dev/null 2>&1 && sudo yum install -y rsync) || true )"

      - name: Rsync deploy
        run: |
          rsync -az --delete \
            --exclude '.git' \
            --exclude '.github' \
            -e "sshpass -p '$VPS_PASSWORD' ssh -o ConnectTimeout=30 -p ${VPS_PORT:-22}" \
            ./ "$VPS_USER@$VPS_HOST:$DEPLOY_PATH/"

      - name: Post-deploy (optional)
        run: |
          if [ -n "${POST_DEPLOY_CMD:-}" ]; then
            echo "Running post-deploy: $POST_DEPLOY_CMD"
            sshpass -p "$VPS_PASSWORD" ssh -o ConnectTimeout=30 -p "${VPS_PORT:-22}" "$VPS_USER@$VPS_HOST" "$POST_DEPLOY_CMD"
          else
            echo "No POST_DEPLOY_CMD set; skipping."
          fi

  # -------------- DAST (ZAP) --------------
  dast:
    name: ZAP Baseline
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    env:
      TARGET_URL: ${{ secrets.ZAP_TARGET_URL }}   # e.g. https://your-app.example.com
    steps:
      - name: Validate ZAP Target URL
        run: |
          if [ -z "$TARGET_URL" ]; then
            echo "❌ ZAP_TARGET_URL secret is not set"
            echo "Please set ZAP_TARGET_URL secret to your application URL (e.g., https://your-app.example.com)"
            exit 1
          fi
          echo "✅ ZAP Target URL: $TARGET_URL"
          
          # Test if target is reachable
          echo "🔍 Testing target reachability..."
          if curl -s --connect-timeout 10 --max-time 30 -I "$TARGET_URL" >/dev/null 2>&1; then
            echo "✅ Target is reachable"
          else
            echo "⚠️ Target may not be reachable, but continuing with scan..."
          fi

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ env.TARGET_URL }}
          fail_action: false
          cmd_options: >-
            -a -m 5 -T 10 -r zap-report.html -w zap-report.md -J zap-report.json -x zap-report.xml
        continue-on-error: true

      - name: ZAP Scan Results
        if: always()
        run: |
          echo "📊 ZAP scan completed"
          ls -la *.html *.md *.json *.xml 2>/dev/null || echo "Some report files may not be generated"
          if [ -f report_html.html ]; then
            echo "✅ HTML report generated: report_html.html"
          fi
          if [ -f report_md.md ]; then
            echo "✅ Markdown report generated: report_md.md"
          fi
          if [ -f zap-report.html ]; then
            echo "✅ ZAP HTML report generated: zap-report.html"
          fi
          if [ -f zap-report.json ]; then
            echo "✅ ZAP JSON report generated: zap-report.json"
          fi

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-reports
          path: |
            report_html.html
            report_md.md
            zap-report.html
            zap-report.md
            zap-report.json
            zap-report.xml
          retention-days: 30
